import React, { useState, useEffect } from 'react';
import '../styles/NeuralNetworkPage.css';
import image from '../assets/image.png';
import axios from "axios";

const ImageUploader = ({ selectedFile, onRemove, onChange }) => (
    <div className="inputFile">
        <input
            type="file"
            id="fileInput"
            className="input"
            onChange={onChange}
            accept=".jpg, .png"
        />
        {!selectedFile && (
            <label htmlFor="fileInput" className="inputLabel">
                –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å
            </label>
        )}
        {selectedFile && (
            <div className="imageContainer">
                <img src={selectedFile} alt="Uploaded" className="image" />
                <button onClick={onRemove} className="removeButton">√ó</button>
            </div>
        )}
    </div>
);

const NeuralNetworkPage = () => {
    const [selectedFile, setSelectedFile] = useState(null);
    const [generatedImages, setGeneratedImages] = useState([]);

    const handleInputChange = (e) => {
        e.preventDefault();
        const { files } = e.target;
        setSelectedFile(files[0]);
    };

    const onRemove = () => {
        setSelectedFile(null);
    };

    const generateImages = async () => {
        if (!selectedFile) {
            alert('Please upload an image.');
            return;
        }

        const url = 'http://192.168.219.24:8999/mp/BackroudReplace/?positive="on the grass in Central Park, gorgeous summer day with Bethesda fountain in the background, commercial footwear product photography"&negative="people, litter, trash, crowds, messy"';

        // –°–æ–∑–¥–∞–µ–º FormData –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        const formData = new FormData();
        formData.append('file', selectedFile);

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: formData,
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ—à–µ–ª –∑–∞–ø—Ä–æ—Å
            if (!response.ok) {
                const errorData = await response.json();
                console.error('Error response from server:', errorData);
                alert(`Server error: ${response.status} - ${errorData}`);
                return;
            }

            const data = await response.json();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
            if (!data.images || data.images.length === 0) {
                console.warn('No images received from the server response:', data);
                alert('No images received from the server.');
                return;
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('Images received from server:', data.images);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Base64 –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const imagesBase64 = data.images.map((img) => `data:image/png;base64,${img}`);
            setGeneratedImages(imagesBase64);

        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
            console.error('Error during fetch:', error.message);
            alert(`Request error: ${error.message}`);
        }
    };


    useEffect(() => {
        return () => {
            if (selectedFile) URL.revokeObjectURL(selectedFile);
        };
    }, [selectedFile]);

    return (
        <div className="neuralNetworkPage">
            <div className="header">
                <p className="howTo">
                    –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (.jpg –∏–ª–∏ .png), –∞ –∑–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ —Ñ–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ª–µ–¥—É–π—Ç–µ –æ–±—â–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –Ω–∏–∂–µ:
                </p>
                <ol>
                    <li>‚ùå <b>–ù–µ</b> –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏)</li>
                    <li>‚úÖ <b>–û–ø–∏—Å—ã–≤–∞–π—Ç–µ</b> "–æ—Å–Ω–æ–≤–∞–Ω–∏–µ" –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å—Ç–æ–ª–µ)</li>
                    <li>‚úÖ <b>–û–ø–∏—Å—ã–≤–∞–π—Ç–µ</b> —Å—Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –≥—Ä–µ—á–µ—Å–∫–æ–º –∫–æ—Ç—Ç–µ–¥–∂–µ)</li>
                    <li>‚úÖ <b>–û–ø–∏—Å—ã–≤–∞–π—Ç–µ</b> —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∫–ª–∞–º–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –≤–∏–¥–æ–º —Å–±–æ–∫—É)</li>
                    <li>ü§î –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–±–µ–∂–∞—Ç—å üôÖ‚Äç‚ôÇÔ∏è –≤ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π</li>
                </ol>
            </div>

            <div className="neuralNetworkPage__wrapper">
                <ImageUploader
                    selectedFile={selectedFile ? URL.createObjectURL(selectedFile) : null}
                    onChange={handleInputChange}
                    onRemove={onRemove}
                />
            </div>

            <button onClick={generateImages} className="generateButton">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!</button>

            <div className="resultsContainer">
                <div className="results__wrapper">
                    <div className="results__title_main">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</div>
                    <div className="results__title">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ</div>
                    <div className="results__border"></div>
                </div>
                <div className="results__tab">
                    <div className="results__content">
                        {generatedImages.length > 0 ? (
                            generatedImages.map((imgSrc, idx) => (
                                <img key={idx} src={imgSrc} alt={`Generated ${idx}`} className="generatedImage" />
                            ))
                        ) : (
                            <img src={image} alt="Generated content" className="generatedImage" />
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default NeuralNetworkPage;
